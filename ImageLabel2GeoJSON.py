# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ImageLabel2GeoJSON
                                 A QGIS plugin
 ImageLabel to GeoJSON
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-07-09
        git sha              : $Format:%H$
        copyright            : (C) 2023 by GeoMaster
        email                : rmonet1203@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QThread, pyqtSignal, pyqtSlot
from qgis.PyQt.QtWidgets import QAction, QToolBar, QApplication, QMessageBox, QLabel, QFileDialog, QProgressBar
from qgis.gui import *
from qgis.core import *
from qgis.PyQt.QtGui import QPixmap, QPainter, QPen, QColor, QIcon, QImage, QBrush, QFont
from qgis.core import QgsVectorLayer, QgsCoordinateReferenceSystem, QgsVectorFileWriter

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .ImageLabel2GeoJSON_dockwidget import ImageLabel2GeoJSONDockWidget
import os.path
from PIL import Image, ImageDraw
import numpy as np
from sklearn.linear_model import LinearRegression

from .detect_task import Detect_task

gps_points = np.array([])
xy_points = np.array([])
coef_flag = False

class ImageLabel2GeoJSON:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ImageLabel2GeoJSON_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&ImageLabel2GeoJSON')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'ImageLabel2GeoJSON')
        self.toolbar.setObjectName(u'ImageLabel2GeoJSON')

        #print "** INITIALIZING ImageLabel2GeoJSON"

        self.pluginIsActive = False
        self.dockwidget = None
        
        #---------------------------
        self.canvas = self.iface.mapCanvas()
        self.pointTool = QgsMapToolEmitPoint(self.canvas)
        self.progress_bar = QProgressBar()
        self.precoordinates = ""
        self.layer = ''
        global coef_flag
        self.layerName = "geojson_layer"
        
        coef_flag = False

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ImageLabel2GeoJSON', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action
    

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ImageLabel2GeoJSON/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ImageLabel2GeoJSON'),
            callback=self.run,
            parent=self.iface.mainWindow())
    
    def initfun(self):
        global coef_flag
        coef_flag = False
        global xy_points
        global gps_points
        gps_points = np.array([])
        xy_points = np.array([])
        
        self.myremoveLayer()
    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING ImageLabel2GeoJSON"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.dockwidget.open_btn.clicked.disconnect(self.open_files)
        self.pointTool.canvasClicked.disconnect(self.display_point)
        
        self.dockwidget.setting_btn.clicked.disconnect(self.calculate_coef)

        self.dockwidget.reset_btn.clicked.disconnect(self.reset_btn)
        self.dockwidget.gen_btn.clicked.disconnect(self.generate_btn)
        self.dockwidget.export_btn.clicked.disconnect(self.export)
        
        # self.myremoveLayer()
        self.initfun()
        self.dockwidget.image_label.clear()
        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False
        
    def display_point(self,  pnt):
        global coef_flag
        if coef_flag:
            return
        global xy_points
        puntox = str(pnt[0])
        puntoy = str(pnt[1])
        # print(pnt)
        print(f"map clicked at ({puntox}, {puntoy})")
                
        xy_points = np.array([list(point) for point in xy_points] + [[pnt[0], pnt[1]]])
        
    def open_files(self):
        file_path = ""
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.ExistingFile)
        dialog.setNameFilter("(*.png *.geojson);;All files (*.*)")
        
        if dialog.exec_():
            file_path = dialog.selectedFiles()[0]
            # Do something with the selected file path
            print("Selected file:", file_path)
        
        if file_path == "":
            QMessageBox.information(self.iface.mainWindow(), "info", 'import file null')   
            return
        file_name = os.path.splitext(file_path)[0]
        
        
        isfile = False
        
        if os.path.isfile(file_name + ".png") and os.path.isfile(file_name + '.geojson'):
            isfile = True
        
        if isfile == False:
            QMessageBox.information(self.iface.mainWindow(), "info", 'files invalid')
            return
        self.initfun()    
        QMessageBox.information(self.iface.mainWindow(), "info", file_name)    

        image_path = file_name + ".png"

        self.image = Image.open(image_path)
        self.gray = self.image.convert('L')
        # Convert the image to RGB format
        image_rgb = self.image.convert('RGB')

        # Convert PIL image to numpy array
        image_np = np.array(image_rgb)

        # Convert numpy array to QImage
        height, width, channel = image_np.shape
        bytes_per_line = channel * width
        q_image = QImage(image_np.data, width, height, bytes_per_line, QImage.Format_RGB888)

        qpixmap = QPixmap.fromImage(q_image)
        self.dockwidget.image_label.setPixmap(qpixmap)
        
        #add vector layer
        layer_path = file_name + '.geojson'        
        self.layer = QgsVectorLayer(layer_path, self.layerName, 'ogr')
        
        # access the real datasource behind your layer, delete the duolicate fields and update the data
        fields = self.layer.fields()
        
        del_index = []
        for field in fields:
            del_index.append(fields.indexFromName(field.name())) # create a list of feild indices to delete
            
        data_provider = self.layer.dataProvider()        
        data_provider.deleteAttributes(del_index)
        self.layer.updateFields()
        self.layer.commitChanges()
        
        self.layer.startEditing()
        # Add a new attribute field
        field_name = 'ID'  # Replace with your field name
        field_type = QVariant.Int  # Replace with the desired field type (e.g., QVariant.String, QVariant.Int, QVariant.Double, etc.)
        # Create the attribute field
        field = QgsField(field_name, field_type)
        # Add the field to the layer
        self.layer.addAttribute(field)
        
        # Add a new attribute field
        field_name = 'name'  # Replace with your field name
        field_type = QVariant.String  # Replace with the desired field type (e.g., QVariant.String, QVariant.Int, QVariant.Double, etc.)
        # Create the attribute field
        field = QgsField(field_name, field_type)
        # Add the field to the layer
        self.layer.addAttribute(field)
        
        # Commit the changes to the layer
        self.layer.commitChanges()
        
        QgsProject.instance().addMapLayer(self.layer)
        self.layer.triggerRepaint()
        self.canvas.setMapTool(self.pointTool)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD ImageLabel2GeoJSON"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&ImageLabel2GeoJSON'),
                action)
            self.iface.removeToolBarIcon(action)
        
        # self.removeLayer()
        # remove the toolbar
        del self.toolbar
        
    def myremoveLayer(self):
        # self.layer = QgsVectorLayer(layer_path, 'Layer Name', 'ogr')
        layers = QgsProject.instance().mapLayersByName(self.layerName)
        if layers:
            layer1 = layers[0]
            # Remove the layer from the project
            QgsProject.instance().removeMapLayer(layer1.id())
            self.iface.mapCanvas().unsetMapTool(self.pointTool)
            # Refresh the layer registry to reflect the changes
            # QgsProject.instance().layerTreeRoot().refreshLayerSymbology()
            
        # self.canvas.refresh()
        
    def reset_btn(self):
        self.canvas.setMapTool(self.pointTool)
        global gps_points
        global xy_points
        global coef_flag
        gps_points = np.array([])
        xy_points = np.array([])        
        coef_flag = False
           
    def calculate_coef(self):        
        
        # valore_mappa = self.outputlatlng.text()
        # print(valore_mappa)
        if (len(xy_points) < 3 or len(gps_points)< 3):
            # self.show_message('add over 3 points for convert')
            QMessageBox.warning(self.iface.mainWindow(), "warning", 'add over 3 points for convert')
            return
        if(len(xy_points) != len(gps_points)):
            # self.show_message('The number of points clicked should be equal!')
            QMessageBox.warning(self.iface.mainWindow(), "warning", 'The number of points clicked should be equal!')
            return
        self.affine = AffinGPS(xy_points, gps_points)
        slope = self.affine.Slope
        slope_str = str(slope) if slope is not None else "None"
        QMessageBox.information(self.iface.mainWindow(), "info", 'coeff:  ' + slope_str)
        draw = ImageDraw.Draw(self.image)
        for feature in self.layer.getFeatures():

            # Get the geometry of the feature (block)
            geometry = feature.geometry()
                
            # Retrieve the coordinates of the polygon
            coordinates = geometry.asPolygon()[0]  # Assuming single exterior ring
            if coordinates == self.precoordinates:
                continue
            self.precoordinates = coordinates
            
            poygons = []  

            coor = self.affine.xy2gps(coordinates)
            for point in coor:
                new_polygon = (int(point[0]), int(point[1]))
                poygons.append(new_polygon)

        
            # Draw the polygon on the image
            draw.polygon(poygons, outline=(0, 255, 0))
                

            image_rgb = self.image.convert('RGB')
            # Convert PIL image to numpy array
            image_np = np.array(image_rgb)

            # Convert numpy array to QImage
            height, width, channel = image_np.shape
            bytes_per_line = channel * width
            q_image = QImage(image_np.data, width, height, bytes_per_line, QImage.Format_RGB888)

            qpixmap = QPixmap.fromImage(q_image)
            self.dockwidget.image_label.setPixmap(qpixmap)
            # Remove the map tool
            global coef_flag
            coef_flag = True
            self.iface.mapCanvas().unsetMapTool(self.pointTool)
            
    def task_finished(self, data_text):
        self.layer.startEditing()
        i = 0
        for feature in self.layer.getFeatures():
            feature['name'] = data_text[i]
            feature['ID'] = id
            self.layer.updateFeature(feature)
            i += 1
        
        self.layer.commitChanges()       

        # Refresh the layer to display the labels
        self.layer.triggerRepaint()
        QMessageBox.information(self.iface.mainWindow(), "Info", f'success!')
            
    def generate_btn(self):
        global coef_flag
        
        if coef_flag == False:
            return
        
        # Create an instance of the thread
        task = Detect_task(description = 'generate', layer = self.layer, gray = self.gray, affine= self.affine, iface = self.iface)
        task.taskCompleted.connect(self.task_finished)
        QgsApplication.taskManager().addTask(task)
        
        QgsMessageLog.logMessage('runtask')
    
    def export(self):
         # Create a Qt save file dialog
        save_dialog = QFileDialog()
        save_dialog.setDefaultSuffix("geojson")
        save_dialog.setNameFilter("GeoJSON files (*.geojson)")

        # Set the dialog to save mode
        save_dialog.setAcceptMode(QFileDialog.AcceptSave)
        file_path = ""
        # Execute the save file dialog
        if save_dialog.exec_():
        # Get the selected file path
            file_path = save_dialog.selectedFiles()[0]
            
        if file_path == "":
            return

        result = QgsVectorFileWriter.writeAsVectorFormat(self.layer, file_path, "UTF-8", driverName="GeoJSON")
        # Check if the export was successful
        if result == QgsVectorFileWriter.NoError:            
            QMessageBox.information(self.iface.mainWindow(), "Info", 'Export completed successfully.')   
        else:
            # QMessageBox.information(self.iface.mainWindow(), "info", 'Failed to export the layer.') 
            QMessageBox.information(self.iface.mainWindow(), "Info", f'Export completed successfully.') 
               
    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING ImageLabel2GeoJSON"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = ImageLabel2GeoJSONDockWidget()
            
            # Eventy
            self.pointTool.canvasClicked.connect(self.display_point)
            self.dockwidget.open_btn.clicked.connect(self.open_files)
            self.dockwidget.setting_btn.clicked.connect(self.calculate_coef)
            
            self.dockwidget.reset_btn.clicked.connect(self.reset_btn)
            self.dockwidget.gen_btn.clicked.connect(self.generate_btn)
            self.dockwidget.export_btn.clicked.connect(self.export)
            # self.dockwidget.gen_btn.clicked.clicked.connect(lambda: self.run_task(self.layer, self.affine, self.gray))
            # Connect the mousePressEvent to the image_label
            self.dockwidget.image_label.mousePressEvent = lambda event: ImageLabel.mousePressEvent(self.dockwidget.image_label, event)

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
            

class AffinGPS:
    model = LinearRegression()
    Slope = ""
    def __init__(self, local_points, gps_points) -> None:       
        # Create a linear regression model and fit it to the data
        self.model.fit(local_points, gps_points)
        # Print the conversion coefficients (slope and intercept)
        self.Slope = self.model.coef_
        print("Slope: ", self.model.coef_)
        print("Intercept: ", self.model.intercept_)

    def xy2gps(self, local_points):
        new_gps_point = self.model.predict(local_points)
        return new_gps_point
             
class ImageLabel(QLabel):
    
    def __init__(self, parent=None):
        super(ImageLabel, self).__init__(parent)
        self.circle_color = QColor(255, 0, 0)  # Initial circle color
        
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            # global coef_flag
            # if coef_flag:
            #     return
            self.circle_color = QColor(0, 255, 0)
            self.update()  # Update the QLabel to repaint the circle
            
            position = event.pos()
            x = position.x()
            y = position.y()
            global gps_points
            gps_points = np.array([list(point) for point in gps_points] + [[x, y]])
            print(f"Mouse clicked at ({x}, {y})")
            # with open("f:/image_point.txt", 'a') as file:
            #     file.write(f'[{x}, {y}]\n')
                
            # message = f"Mouse clicked at ({x}, {y})"
            # QMessageBox.information(self, "Mouse Clicked", message)
        QLabel.mousePressEvent(self, event)
        
    def paintEvent(self, event):
        super().paintEvent(event)
        if self.circle_center:
            painter = QPainter(self)
            pen = QPen(QColor(255, 0, 0))
            pen.setWidth(2)
            painter.setPen(pen)
            painter.drawEllipse(self.circle_center, 50, 50)  # Modify the radius as needed
